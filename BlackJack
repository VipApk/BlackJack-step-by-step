#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <sstream>
#include <iomanip>  

using namespace std;

enum Suit { HEARTS, DIAMONDS, CLUBS, SPADES };

template <typename T>
string to_string(T value) {
    std::ostringstream oss;
    oss << value;
    return oss.str();
}

class Card {
public:
    int value;
    Suit suit;

    Card(int v, Suit s) : value(v), suit(s) {}

    string printCardToString() const {
        string cardValue;
        if (value == 1)
            cardValue = "Ace";
        else if (value == 11)
            cardValue = "Jack";
        else if (value == 12)
            cardValue = "Queen";
        else if (value == 13)
            cardValue = "King";
        else
            cardValue = to_string(value);

        string suitName;
        switch (suit) {
            case HEARTS: suitName = "Hearts"; break;
            case DIAMONDS: suitName = "Diamonds"; break;
            case CLUBS: suitName = "Clubs"; break;
            case SPADES: suitName = "Spades"; break;
        }

        return cardValue + " of " + suitName;
    }

    int getBlackjackValue() const {
        if (value > 10) {
            return 10;
        }
        return value;
    }
};

class Deck {
private:
    vector<Card> deck;
    int currentCardIndex;

public:
    Deck() {
        for (int suit = HEARTS; suit <= SPADES; ++suit) {
            for (int value = 1; value <= 13; ++value) {
                deck.push_back(Card(value, static_cast<Suit>(suit)));
            }
        }
        currentCardIndex = 0;
        srand(time(0));   
    }

    void shuffleDeck() {
        for (int i = 0; i < deck.size(); ++i) {
            int randIndex = rand() % deck.size();
            swap(deck[i], deck[randIndex]);
        }
    }

    Card dealCard() {
        if (currentCardIndex >= deck.size()) {
            shuffleDeck();
            currentCardIndex = 0;
        }
        return deck[currentCardIndex++];
    }
};

class Player {
public:
    vector<Card> hand;
    bool isDealer;
    string playerName;
    double balance;   
    double currentBet; 
    bool eliminated;  

    Player(bool dealer = false, string name = "Player", double startBalance = 1000.0)
        : isDealer(dealer), playerName(name), balance(startBalance), currentBet(0.0), eliminated(false) {}

    void takeCard(Card card) {
        hand.push_back(card);
    }

    int getHandValue() const {
        int totalValue = 0;
        int aces = 0;

        for (const Card &card : hand) {
            int value = card.getBlackjackValue();
            totalValue += value;
            if (value == 1) {
                aces++;
            }
        }

        while (aces > 0 && totalValue + 10 <= 21) {
            totalValue += 10;
            aces--;
        }

        return totalValue;
    }

    bool isBusted() const {
        return getHandValue() > 21;
    }

    string getPlayerName() const {
        return playerName;
    }

    bool isDealerPlayer() const {
        return isDealer;
    }

    void placeBet() {
        if (eliminated || balance <= 0) {
            cout << playerName << " has been eliminated and cannot place a bet." << endl;
            return;
        }
        do {
            cout << playerName << ", you have $" << balance << ". Enter your bet: $";
            cin >> currentBet;
            if (currentBet > balance) {
                cout << "You cannot bet more than your current balance!" << endl;
            }
        } while (currentBet > balance);

        balance -= currentBet; 
    }

    void winBet() {
        balance += currentBet * 2;  
    }

    void tieBet() {
        balance += currentBet;  
    }

    void loseBet() {

        if (balance <= 0) {
            eliminated = true;
            cout << playerName << " has been eliminated from the game!" << endl;
        }
    }

    void resetHand() {
        hand.clear();
        currentBet = 0;
    }
};


void showPlayersHands(const vector<Player>& players, bool revealDealer = true) {
    vector<vector<string>> playerHands(players.size());
    vector<int> handValues(players.size());

   
    for (size_t i = 0; i < players.size(); ++i) {
        if (players[i].eliminated) continue;
        stringstream ss;
        for (int j = 0; j < players[i].hand.size(); ++j) {
            if (!revealDealer && i == 0 && j == 0 && players[i].isDealerPlayer()) {
                ss << "Hidden card";
            } else {
                ss << players[i].hand[j].printCardToString();
            }
            playerHands[i].push_back(ss.str());
            ss.str(""); 
        }
        handValues[i] = players[i].getHandValue();
    }

   
    cout << setw(15) << left << "Cards";
    for (const auto& player : players) {
        if (!player.eliminated)
            cout << setw(15) << left << player.getPlayerName();
    }
    cout << endl;

    
    size_t maxHandSize = 0;
    for (const auto& hand : playerHands) {
        maxHandSize = max(maxHandSize, hand.size());
    }

   
    for (size_t cardIdx = 0; cardIdx < maxHandSize; ++cardIdx) {
        cout << setw(15) << left << "Card " + to_string(cardIdx + 1);
        for (size_t playerIdx = 0; playerIdx < players.size(); ++playerIdx) {
            if (players[playerIdx].eliminated) continue;
            if (cardIdx < playerHands[playerIdx].size()) {
                cout << setw(15) << left << playerHands[playerIdx][cardIdx];
            } else {
                cout << setw(15) << left << " ";
            }
        }
        cout << endl;
    }

  
    cout << setw(15) << left << "Total";
    for (size_t playerIdx = 0; playerIdx < players.size(); ++playerIdx) {
        if (!players[playerIdx].eliminated)
            cout << setw(15) << left << handValues[playerIdx];
    }
    cout << endl;
}


bool isGameOver(const vector<Player>& players) {
    int activePlayers = 0;
    for (const auto& player : players) {
        if (!player.isDealerPlayer() && player.balance > 0) {
            activePlayers++;
        }
    }
    return activePlayers <= 1;
}


void playBlackjackRound(vector<Player>& players, Deck& deck) {
   
    for (auto &player : players) {
        if (!player.isDealerPlayer() && !player.eliminated) {
            player.placeBet();
        }
    }

   
    for (auto &player : players) {
        if (!player.eliminated) {
            player.resetHand();
            player.takeCard(deck.dealCard());
            player.takeCard(deck.dealCard());
        }
    }

    
    showPlayersHands(players, false);

    
    for (size_t i = 1; i < players.size(); ++i) { 
        Player &player = players[i];
        if (player.eliminated) continue;

        char choice;
        while (true) {
            cout << player.getPlayerName() << ", do you want to hit (h) or stand (s)? ";
            cin >> choice;
            if (choice == 'h') {
                player.takeCard(deck.dealCard());
                showPlayersHands(players, false);
                if (player.isBusted()) {
                    cout << player.getPlayerName() << " busted!" << endl;
                    player.loseBet();
                    break;
                }
            } else if (choice == 's') {
                break;
            }
        }
    }

  
    Player &dealer = players[0];
    cout << "Dealer's turn." << endl;
    while (dealer.getHandValue() < 17) {
        cout << "Dealer hits." << endl;
        dealer.takeCard(deck.dealCard());
        showPlayersHands(players, false);
        if (dealer.isBusted()) {
            cout << "Dealer busted!" << endl;
            break;
        }
    }

   
    showPlayersHands(players, true);

 
    for (size_t i = 1; i < players.size(); ++i) {
        Player &player = players[i];
        if (!player.eliminated && !player.isBusted()) {
            int playerValue = player.getHandValue();
            int dealerValue = dealer.getHandValue();

            cout << player.getPlayerName() << "'s result: ";
            if (dealer.isBusted() || playerValue > dealerValue) {
                cout << "You win!" << endl;
                player.winBet();
            } else if (playerValue < dealerValue) {
                cout << "Dealer wins!" << endl;
                player.loseBet();
            } else {
                cout << "It's a tie!" << endl;
                player.tieBet();
            }
        }
        cout << player.getPlayerName() << "'s new balance: $" << player.balance << endl;
    }
}

void playBlackjack(int numPlayers) {
    Deck deck;
    deck.shuffleDeck();

    vector<Player> players;
    players.push_back(Player(true, "Dealer", 0)); 

    for (int i = 1; i <= numPlayers; ++i) {
        string playerName;
        cout << "Enter name for player " << i << ": ";
        cin >> playerName;
        players.push_back(Player(false, playerName));
    }

 
    while (!isGameOver(players)) {
        cout << "\n=== New Round ===\n";
        playBlackjackRound(players, deck);
    }


    for (const auto &player : players) {
        if (!player.isDealerPlayer() && player.balance > 0) {
            cout << player.getPlayerName() << " is the winner with $" << player.balance << "!" << endl;
            break;
        }
    }
}

int main() {
    cout << "Welcome to Blackjack!" << endl;
    cout << "Press Enter to start..." << endl;
    cin.ignore();
    cin.get();

    int numPlayers;
    cout << "Enter the number of players: ";
    cin >> numPlayers;

    playBlackjack(numPlayers);

    return 0;
}
