#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <sstream>
#include <iomanip>

using namespace std;

enum Suit { HEARTS, DIAMONDS, CLUBS, SPADES };

template <typename T>
string to_string(T value) {
    std::ostringstream oss;
    oss << value;
    return oss.str();
}
class Card {
public:
    int value; 
    Suit suit;

    Card(int v, Suit s) : value(v), suit(s) {}

    string printCardToString() const {
        string cardValue;
        if (value == 1)
            cardValue = "Ace";
        else if (value == 11)
            cardValue = "Jack";
        else if (value == 12)
            cardValue = "Queen";
        else if (value == 13)
            cardValue = "King";
        else
            cardValue = to_string(value);

        string suitName;
        switch (suit) {
            case HEARTS: suitName = "Hearts"; break;
            case DIAMONDS: suitName = "Diamonds"; break;
            case CLUBS: suitName = "Clubs"; break;
            case SPADES: suitName = "Spades"; break;
        }

        return cardValue + " of " + suitName;
    }

    int getBlackjackValue() const {
        if (value > 10) {
            return 10;
        }
        return value; 
    }
};

class Deck {
private:
    vector<Card> deck;
    int currentCardIndex;

public:
    Deck() {

        for (int suit = HEARTS; suit <= SPADES; ++suit) {
            for (int value = 1; value <= 13; ++value) {
                deck.push_back(Card(value, static_cast<Suit>(suit)));
            }
        }
        currentCardIndex = 0;
        srand(time(0));  
    }

    void shuffleDeck() {
        for (int i = 0; i < deck.size(); ++i) {
            int randIndex = rand() % deck.size();
            swap(deck[i], deck[randIndex]);
        }
    }

    Card dealCard() {
        if (currentCardIndex >= deck.size()) {
            shuffleDeck();
            currentCardIndex = 0;
        }
        return deck[currentCardIndex++];
    }
};

class Player {
public:
    vector<Card> hand;
    bool isDealer;
    string playerName;

    Player(bool dealer = false, string name = "Player") : isDealer(dealer), playerName(name) {} 

    void takeCard(Card card) {
        hand.push_back(card);
    }

    int getHandValue() const {
        int totalValue = 0;
        int aces = 0;

        for (const Card& card : hand) {
            int value = card.getBlackjackValue();
            totalValue += value;
            if (value == 1) {
                aces++;
            }
        }

        while (aces > 0 && totalValue + 10 <= 21) {
            totalValue += 10;
            aces--;
        }

        return totalValue;
    }

bool isBusted() const {
        return getHandValue() > 21;
    }
string getPlayerName() const {
        return playerName;
    }

    bool isDealerPlayer() const {
        return isDealer;
}
};

void showPlayersHands(const vector<Player>& players, bool revealDealer = true) {
    vector<vector<string>> playerHands(players.size());
    vector<int> handValues(players.size());

    for (size_t i = 0; i < players.size(); ++i) {
        stringstream ss;
        for (int j = 0; j < players[i].hand.size(); ++j) {
            if (!revealDealer && i == 0 && j == 0 && players[i].isDealerPlayer()) {
                ss << "Hidden card";
            }
            else {
                ss << players[i].hand[j].printCardToString();
            }
            playerHands[i].push_back(ss.str());
            ss.str("");  
        }
        handValues[i] = players[i].getHandValue();
    }

    cout << setw(15) << left << "Cards";
    for (const auto& player : players) {
        cout << setw(15) << left << player.getPlayerName();
    }
    cout << endl;

    size_t maxHandSize = 0;
    for (const auto& hand : playerHands) {
        maxHandSize = max(maxHandSize, hand.size());
    }

    for (size_t cardIdx = 0; cardIdx < maxHandSize; ++cardIdx) {
        cout << setw(15) << left << "Card " + to_string(cardIdx + 1);
        for (size_t playerIdx = 0; playerIdx < players.size(); ++playerIdx) {
            if (cardIdx < playerHands[playerIdx].size()) {
                cout << setw(15) << left << playerHands[playerIdx][cardIdx];
            }
            else {
                cout << setw(15) << left << " ";
            }
        }
        cout << endl;
    }

    cout << setw(15) << left << "Total";
    for (int value : handValues) {
        cout << setw(15) << left << value;
    }
    cout << endl;
}

void playBlackjack(int numPlayers) {
    Deck deck;
    deck.shuffleDeck();

    vector<Player> players;
    for (int i = 1; i <= numPlayers; ++i) {
        string playerName;
        cout << "Enter name for player " << i << ": ";
        cin >> playerName;
        players.push_back(Player(false, playerName));
    }

    Player dealer(true, "Dealer");
players.insert(players.begin(), dealer);

for (auto &player : players) {
        player.takeCard(deck.dealCard());
        player.takeCard(deck.dealCard());
    }
    showPlayersHands(players, false);

    for (size_t i = 1; i < players.size(); ++i) {  
        Player& player = players[i];
        char choice;
        while (true) {
            cout << player.getPlayerName() << ", do you want to hit (h) or stand (s)? ";
            cin >> choice;
            if (choice == 'h') {
                player.takeCard(deck.dealCard());
                showPlayersHands(players, false);  
                if (player.isBusted()) {
                    cout << player.getPlayerName() << " busted!" << endl;
                    break;
                }
            }
            else if (choice == 's') {
                break;
            }
        }
    }

    Player& dealerPlayer = players[0];
    while (dealerPlayer.getHandValue() < 17) {
        cout << "Dealer hits." << endl;
        dealerPlayer.takeCard(deck.dealCard());
        showPlayersHands(players, false);  
        if (dealerPlayer.isBusted()) {
            cout << "Dealer busted! Remaining players win." << endl;
            return;
        }
    }

    showPlayersHands(players, true);
    for (size_t i = 1; i < players.size(); ++i) {
        Player& player = players[i];
        if (!player.isBusted()) {
            int playerValue = player.getHandValue();
            int dealerValue = dealerPlayer.getHandValue();

            cout << player.getPlayerName() << "'s result: ";
            if (playerValue > dealerValue) {
                cout << "You win!" << endl;
            }
            else if (dealerValue > playerValue) {
                cout << "Dealer wins!" << endl;
            }
            else {
                cout << "It's a tie!" << endl;
            }
        }
    }
}

int main() {
    cout << "Welcome to Blackjack!" << endl;
    cout << "Press Enter to start..." << endl;
    cin.ignore();  
    cin.get();     

    int numPlayers;
    cout << "Enter the number of players: ";
    cin >> numPlayers;

    playBlackjack(numPlayers);

    return 0;
}
